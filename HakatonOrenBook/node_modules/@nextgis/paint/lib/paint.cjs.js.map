{"version":3,"file":"paint.cjs.js","sources":["../src/fromPaintExpression.ts","../src/typeHelpers.ts","../src/preparePaint.ts"],"sourcesContent":["import { evaluate, type Expression, isExpression } from '@nextgis/expression';\n\nimport type { Feature } from 'geojson';\n\nimport type { GetPaintCallback, VectorAdapterLayerPaint } from './interfaces';\n\ntype PropertyExpressionCb = (feature: Feature) => ReturnType<typeof evaluate>;\n\nfunction createPropertyExpressionCb(\n  expression: Expression,\n): PropertyExpressionCb {\n  return (feature: Feature) => {\n    const properties = feature.properties;\n    if (properties) {\n      return evaluate(expression, properties);\n    }\n    return false;\n  };\n}\n\nconst excludeExpressionList = ['iconSize', 'iconAnchor'];\n\nexport function createExpressionCallback(\n  paint: Record<string, any>,\n): GetPaintCallback | undefined {\n  let withExpression = false;\n  const expressions: {\n    [key: string]: PropertyExpressionCb;\n  } = {};\n  for (const p in paint) {\n    if (excludeExpressionList.indexOf(p) === -1) {\n      const p_ = p as keyof VectorAdapterLayerPaint;\n      const val = paint[p_];\n      if (isExpression(val)) {\n        withExpression = true;\n        expressions[p_] = createPropertyExpressionCb(val);\n      }\n    }\n  }\n  if (withExpression) {\n    return (feature: Feature) => {\n      const fromCb: any = {};\n      for (const p in expressions) {\n        fromCb[p] = expressions[p](feature);\n      }\n      return { ...paint, ...fromCb };\n    };\n  }\n  return;\n}\n","import type {\n  GeometryPaint,\n  GetPaintCallback,\n  IconPaint,\n  Paint,\n  PropertiesPaint,\n  VectorAdapterLayerPaint,\n} from './interfaces';\n\nexport function isPropertiesPaint(paint: Paint): paint is PropertiesPaint {\n  if (Array.isArray(paint)) {\n    return true;\n  }\n  return false;\n}\n\nexport function isPaint(paint: Paint): paint is VectorAdapterLayerPaint {\n  if (Object.prototype.toString.call(paint) === '[object Object]') {\n    return true;\n  }\n  return false;\n}\n\nexport function isBasePaint(paint: Paint): paint is GeometryPaint {\n  if (isPaint(paint)) {\n    if (paint.type === 'get-paint' || paint.type === 'icon') {\n      return false;\n    }\n    return true;\n  }\n  return false;\n}\n\nexport function isPaintCallback(paint: Paint): paint is GetPaintCallback {\n  if (typeof paint === 'function') {\n    return true;\n  }\n  return false;\n}\n\nexport function isIcon(paint: IconPaint): paint is IconPaint {\n  return paint.type === 'icon' || 'html' in paint;\n}\n","import { featureFilter } from '@nextgis/properties-filter';\n\nimport { createExpressionCallback } from './fromPaintExpression';\nimport { isPaintCallback, isPropertiesPaint } from './typeHelpers';\n\nimport type { Feature } from 'geojson';\n\nimport type {\n  GeometryPaint,\n  GetCustomPaintOptions,\n  GetPaintCallback,\n  GetPaintFunction,\n  Paint,\n  PropertiesPaint,\n  PropertyPaint,\n  VectorAdapterLayerPaint,\n} from './interfaces';\n\nfunction updatePaintOptionFromCallback(\n  paint: GetCustomPaintOptions,\n  getPaintFunctions?: { [name: string]: GetPaintFunction },\n): VectorAdapterLayerPaint | undefined {\n  if (typeof paint.from === 'function') {\n    return paint.from(paint.options);\n  } else if (typeof paint.from === 'string' && getPaintFunctions) {\n    const from = getPaintFunctions[paint.from];\n    if (from) {\n      return from(paint.options);\n    }\n  }\n}\n\nfunction createPropertiesPaint(\n  propertiesPaint: PropertiesPaint,\n): GetPaintFunction {\n  let mask: VectorAdapterLayerPaint = {};\n  const paintsFilters: PropertyPaint[] = [];\n  for (const p of propertiesPaint) {\n    if (p) {\n      if (Array.isArray(p)) {\n        paintsFilters.push(p);\n      } else {\n        mask = p as VectorAdapterLayerPaint;\n      }\n    }\n  }\n\n  return (feature: Feature) => {\n    const paint = paintsFilters.find((x) => featureFilter(feature, x[0]));\n    if (paint) {\n      return { ...mask, ...paint[1] };\n    }\n    return mask;\n  };\n}\n\nfunction expressionCallback({\n  paint,\n  defaultPaint,\n}: PreparePaintOptions): Paint | VectorAdapterLayerPaint {\n  const expressionCallback = createExpressionCallback(paint);\n  if (expressionCallback) {\n    const expressionPaintCb = (feature: Feature) => {\n      return preparePaint({\n        paint: expressionCallback(feature),\n        defaultPaint,\n      }) as VectorAdapterLayerPaint;\n    };\n    expressionPaintCb.paint = finalizePaint({ paint, defaultPaint });\n    return expressionPaintCb as VectorAdapterLayerPaint;\n  }\n  return finalizePaint({ paint, defaultPaint });\n}\n\nfunction finalizePaint({ paint, defaultPaint }: PreparePaintOptions): Paint {\n  let newPaint: Paint = { ...defaultPaint };\n  newPaint = { ...newPaint, ...paint } as GeometryPaint;\n  newPaint.fill = newPaint.fill ?? true;\n  newPaint.stroke =\n    newPaint.stroke !== undefined\n      ? newPaint.stroke\n      : !newPaint.fill || !!(newPaint.strokeColor || newPaint.strokeOpacity);\n  return newPaint;\n}\n\nexport interface PreparePaintOptions {\n  paint: Paint;\n  defaultPaint?: GeometryPaint;\n  getPaintFunctions?: { [name: string]: GetPaintFunction };\n}\n\nexport function preparePaint({\n  paint,\n  defaultPaint,\n  getPaintFunctions,\n}: PreparePaintOptions): Paint {\n  if (!paint) {\n    throw new Error('paint is empty');\n  }\n  let newPaint: Paint = { ...defaultPaint };\n  if (isPaintCallback(paint)) {\n    const getPaintFunction: GetPaintCallback = (feature: Feature) => {\n      const getPaint = preparePaint({\n        paint: paint(feature),\n        defaultPaint,\n        getPaintFunctions,\n      }) as VectorAdapterLayerPaint;\n      getPaint.type = paint.type;\n      return getPaint;\n    };\n    getPaintFunction.type = paint.type;\n    return getPaintFunction;\n  } else if (isPropertiesPaint(paint)) {\n    return (feature: Feature) => {\n      return preparePaint({\n        paint: createPropertiesPaint(paint)(feature),\n        defaultPaint,\n        getPaintFunctions,\n      }) as VectorAdapterLayerPaint;\n    };\n  } else if (paint.type === 'get-paint') {\n    const getPaint = updatePaintOptionFromCallback(paint, getPaintFunctions);\n    if (getPaint) {\n      newPaint = preparePaint({\n        paint: getPaint,\n        defaultPaint,\n        getPaintFunctions,\n      });\n    }\n  } else if (paint.type === 'icon') {\n    return paint;\n  } else {\n    newPaint = expressionCallback({ paint, defaultPaint });\n  }\n\n  if (isPaintCallback(newPaint)) {\n    return newPaint;\n  }\n\n  if ('color' in newPaint) {\n    if (!newPaint.strokeColor) {\n      newPaint.strokeColor = newPaint.color;\n    }\n    if (!newPaint.fillColor) {\n      newPaint.fillColor = newPaint.color;\n    }\n  }\n  if ('opacity' in newPaint) {\n    if (newPaint.strokeOpacity === undefined) {\n      newPaint.strokeOpacity = newPaint.opacity;\n    }\n    if (newPaint.fillOpacity === undefined) {\n      newPaint.fillOpacity = newPaint.opacity;\n    }\n  }\n\n  return newPaint;\n}\n"],"names":["expression","evaluate","isExpression","featureFilter","expressionCallback"],"mappings":"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"}