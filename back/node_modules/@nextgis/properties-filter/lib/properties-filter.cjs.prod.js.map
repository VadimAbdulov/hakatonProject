{"version":3,"file":"properties-filter.cjs.prod.js","sources":["../src/propertiesFilter.ts"],"sourcesContent":["import type { Feature } from 'geojson';\n\nimport type {\n  Operation,\n  Properties,\n  PropertiesFilter,\n  PropertyFilter,\n} from './interfaces';\n\nfunction reEscape(s: string): string {\n  return s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n\nfunction like(b: string, a: string, iLike?: boolean): boolean {\n  a = String(a);\n  b = String(b);\n  if (a === b) return true;\n  if (iLike && a.toUpperCase() === b.toUpperCase()) return true;\n  const re = `^${reEscape(a)}$`.replace(/%/g, '.*').replace('_', '.');\n  return new RegExp(re, iLike ? 'i' : '').exec(b) !== null;\n}\n\nexport const operationsAliases: {\n  [key in Operation]: (a: any, b: any) => boolean;\n} = {\n  // greater(>)\n  gt: (a: any, b: any) => a > b,\n  // lower(<)\n  lt: (a: any, b: any) => a < b,\n  // greater or equal(>=)\n  ge: (a: any, b: any) => a >= b,\n  // lower or equal(<=)\n  le: (a: any, b: any) => a <= b,\n  // equal(=)\n  eq: (a: any, b: any) => a === b,\n  //  not equal(!=)\n  ne: (a: any, b: any) => a !== b,\n\n  in: (a: any, b: any[]) => b.indexOf(a) !== -1,\n  notin: (a: any, b: any[]) => b.indexOf(a) === -1,\n  // LIKE SQL statement(for strings compare)\n  like: (a: string, b: string) => {\n    return like(a, b);\n  },\n  // ILIKE SQL statement(for strings compare)\n  ilike: (a: string, b: string) => {\n    return like(a, b, true);\n  },\n};\n\nexport function isPropertyFilter(\n  filter: PropertyFilter | PropertiesFilter | string,\n): filter is PropertyFilter {\n  const pf = filter as PropertyFilter;\n  if (\n    pf.length === 3 &&\n    typeof pf[0] === 'string' &&\n    typeof pf[1] === 'string'\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/** @deprecated use {@link isPropertyFilter} instead */\nexport function checkIfPropertyFilter(\n  filter: PropertyFilter | PropertiesFilter | string,\n): filter is PropertyFilter {\n  return isPropertyFilter(filter);\n}\n\nexport function featureFilter(\n  feature: Feature,\n  filters: PropertiesFilter,\n): boolean {\n  const properties: Properties = { ...feature.properties };\n  if (properties) {\n    // workaround to filter by feature id\n    properties.$id = feature.id;\n    return propertiesFilter(properties, filters);\n  }\n  return false;\n}\n\nexport function propertiesFilter<T extends Properties = Properties>(\n  properties: T,\n  filters: PropertiesFilter<T>,\n): boolean {\n  const logic = typeof filters[0] === 'string' ? filters[0] : 'all';\n  const filterFunction = (p: PropertyFilter | PropertiesFilter) => {\n    if (isPropertyFilter(p)) {\n      const [field, operation, value] = p;\n      const operationExec = operationsAliases[operation];\n      if (operationExec) {\n        if (operation === 'like' || operation === 'ilike') {\n          if (typeof field === 'string') {\n            let prop = '';\n            const value_ = field.replace(/^%?(\\w+)%?$/, (match, cleanField) => {\n              prop = properties[cleanField];\n              return field.replace(cleanField, value);\n            });\n            return operationExec(prop, value_);\n          }\n        }\n        return operationExec(properties[field], value);\n      }\n      return false;\n    } else {\n      return propertiesFilter(properties, p);\n    }\n  };\n  const filters_ = filters.filter((x) => Array.isArray(x)) as (\n    | PropertyFilter\n    | PropertiesFilter\n  )[];\n  return logic === 'any'\n    ? filters_.some(filterFunction)\n    : filters_.every(filterFunction);\n}\n"],"names":["like","b","a","iLike","String","toUpperCase","re","s","replace","RegExp","exec","operationsAliases","gt","lt","ge","le","eq","ne","in","indexOf","notin","ilike","isPropertyFilter","filter","length","propertiesFilter","properties","filters","logic","filterFunction","p","field","operation","value","operationExec","prop","value_","match","cleanField","filters_","x","Array","isArray","some","every","feature","$id","id"],"mappings":"aAaA,SAASA,EAAKC,EAAWC,EAAWC,GAG9B,IAFJD,EAAIE,OAAOF,OACXD,EAAIG,OAAOH,IACS,OAAA,EACpB,GAAIE,GAASD,EAAEG,gBAAkBJ,EAAEI,cAAsB,OAAA,EACzD,MAAMC,EAAK,IATKC,EASQL,EARjBK,EAAEC,QAAQ,wBAAyB,WAQZA,QAAQ,KAAM,MAAMA,QAAQ,IAAK,KATjE,IAAkBD,EAUT,OAA6C,OAA7C,IAAIE,OAAOH,EAAIH,EAAQ,IAAM,IAAIO,KAAKT,EAC/C,wDAEO,MAAMU,EAET,CAEFC,GAAI,CAACV,EAAQD,IAAWC,EAAID,EAE5BY,GAAI,CAACX,EAAQD,IAAWC,EAAID,EAE5Ba,GAAI,CAACZ,EAAQD,IAAWC,GAAKD,EAE7Bc,GAAI,CAACb,EAAQD,IAAWC,GAAKD,EAE7Be,GAAI,CAACd,EAAQD,IAAWC,IAAMD,EAE9BgB,GAAI,CAACf,EAAQD,IAAWC,IAAMD,EAE9BiB,GAAI,CAAChB,EAAQD,KAA8B,IAAjBA,EAAEkB,QAAQjB,GACpCkB,MAAO,CAAClB,EAAQD,KAA8B,IAAjBA,EAAEkB,QAAQjB,GAEvCF,KAAM,CAACE,EAAWD,IACTD,EAAKE,EAAGD,GAGjBoB,MAAO,CAACnB,EAAWD,IACVD,EAAKE,EAAGD,GAAG,IAIf,SAASqB,EACdC,GAGA,OACgB,IAFLA,EAENC,QACc,iBAHRD,EAGC,IACO,iBAJRA,EAIC,EAKd,CAsBgB,SAAAE,EACdC,EACAC,GAEM,MAAAC,EAA8B,iBAAfD,EAAQ,GAAkBA,EAAQ,GAAK,MACtDE,EAAkBC,IAClB,GAAAR,EAAiBQ,GAAI,CACvB,MAAOC,EAAOC,EAAWC,GAASH,EAC5BI,EAAgBvB,EAAkBqB,GACxC,GAAIE,EAAe,CACb,IAAc,SAAdF,GAAsC,UAAdA,IACL,iBAAVD,EAAoB,CAC7B,IAAII,EAAO,GACX,MAAMC,EAASL,EAAMvB,QAAQ,eAAe,CAAC6B,EAAOC,KAClDH,EAAOT,EAAWY,GACXP,EAAMvB,QAAQ8B,EAAYL,MAE5B,OAAAC,EAAcC,EAAMC,EAC7B,CAEF,OAAOF,EAAcR,EAAWK,GAAQE,EAC1C,CACO,OAAA,CAAA,CAEA,OAAAR,EAAiBC,EAAYI,EACtC,EAEIS,EAAWZ,EAAQJ,QAAQiB,GAAMC,MAAMC,QAAQF,KAI9C,MAAU,QAAVZ,EACHW,EAASI,KAAKd,GACdU,EAASK,MAAMf,EACrB,+BArDO,SACLN,GAEA,OAAOD,EAAiBC,EAC1B,wBAEgB,SACdsB,EACAlB,GAEA,MAAMD,EAAyB,IAAKmB,EAAQnB,YAC5C,QAAIA,IAEFA,EAAWoB,IAAMD,EAAQE,GAClBtB,EAAiBC,EAAYC,GAGxC"}