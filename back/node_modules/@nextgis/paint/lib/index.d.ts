import { Expression } from '@nextgis/expression';
import { PropertiesFilter } from '@nextgis/properties-filter';
import { Feature } from 'geojson';

type PaintType = 'circle' | 'path' | 'pin' | 'icon' | 'get-paint';
interface BasePaintTypes {
    type?: PaintType;
}
interface BasePaint extends BasePaintTypes {
    color?: string | Expression;
    opacity?: number | Expression;
    fill?: boolean;
    fillColor?: string | Expression;
    fillOpacity?: number | Expression;
    stroke?: boolean;
    strokeColor?: string | Expression;
    strokeOpacity?: number | Expression;
    /** stroke width TODO: rename to width **/
    weight?: number | Expression;
    extrude3d?: number | Expression;
}
interface CirclePaint extends BasePaint {
    type?: 'circle';
    radius?: number | Expression;
}
interface PathPaint extends BasePaint {
    type?: 'path';
}
type GeometryPaint = PathPaint & CirclePaint & PinPaint;
interface PinPaint extends BasePaint {
    type?: 'pin';
    size?: number | Expression;
    symbol?: string | Expression;
    /**
     * TODO: make a selection of fonts with icons
     * Place font to assets and set ASSET_PATH local or from cdn
     *
     * https://github.com/CesiumGS/cesium/blob/master/Source/Core/PinBuilder.js
     * @defaultValue maki
     */
    iconfont?: 'maki' | 'mdi' | 'md' | 'fa';
    icon?: string | Expression | IconPaint;
}
interface IconPaint extends BasePaintTypes {
    type: 'icon';
    className?: string;
    html?: string;
    svg?: HTMLElement;
    iconSize?: [number, number];
    iconAnchor?: [number, number];
    rotate?: number;
}
/**
 * @deprecated use IconPaint instead
 */
type IconOptions = IconPaint | PinPaint;
type GetPaintFunction = (opt?: any) => VectorAdapterLayerPaint;
interface GetCustomPaintOptions extends BasePaintTypes {
    type: 'get-paint';
    from: string | GetPaintFunction;
    options?: any;
}
type Properties = {
    [name: string]: any;
};
type PropertyPaint<P extends Properties = Properties> = [
    PropertiesFilter<P>,
    VectorAdapterLayerPaint
];
type PropertiesPaint<P extends Properties = Properties> = [
    VectorAdapterLayerPaint | undefined,
    ...PropertyPaint<P>[]
];
type VectorAdapterLayerPaint = CirclePaint | PathPaint | IconPaint | PinPaint | GetCustomPaintOptions;
interface GetPaintCallback<F extends Feature = Feature> {
    (feature: F): VectorAdapterLayerPaint;
    type?: PaintType;
    paint?: CirclePaint | PathPaint | PinPaint;
}
type Paint<F extends Feature = Feature, P extends Properties | null = F['properties']> = VectorAdapterLayerPaint | GetPaintCallback<F> | PropertiesPaint<P extends null ? Properties : P>;
type Paint3DType = 'ellipsoid' | 'sphere';
type VectorAdapterLayerPaint3D = Sphere3DPaint | Ellipsoid3DPaint;
interface Base3DPaint {
    type?: Paint3DType;
    color?: string | Expression;
    fill?: boolean;
    fillColor?: string | Expression;
    stroke?: boolean;
    strokeWidth?: number | Expression;
    strokeColor?: string | Expression;
}
interface Ellipsoid3DPaint extends Base3DPaint {
    type: 'ellipsoid';
    length: number;
    width: number;
    height: number;
}
interface Sphere3DPaint extends Base3DPaint {
    type: 'sphere';
    radius: number;
}
interface GetPaint3DCallback<F extends Feature = Feature> {
    (feature: F): VectorAdapterLayerPaint;
    type?: Paint3DType;
    paint?: VectorAdapterLayerPaint3D;
}
type PropertiesPaint3D<P extends Properties = Properties> = [
    VectorAdapterLayerPaint3D | undefined,
    ...PropertyPaint<P>[]
];
type PropertyPaint3D<P extends Properties = Properties> = [
    PropertiesFilter<P>,
    VectorAdapterLayerPaint3D
];
type Paint3D<F extends Feature = Feature, P extends Properties | null = F['properties']> = VectorAdapterLayerPaint3D | GetPaintCallback<F> | PropertyPaint3D<P extends null ? Properties : P>;

declare function createExpressionCallback(paint: Record<string, any>): GetPaintCallback | undefined;

interface PreparePaintOptions {
    paint: Paint;
    defaultPaint?: GeometryPaint;
    getPaintFunctions?: {
        [name: string]: GetPaintFunction;
    };
}
declare function preparePaint({ paint, defaultPaint, getPaintFunctions, }: PreparePaintOptions): Paint;

declare function isPropertiesPaint(paint: Paint): paint is PropertiesPaint;
declare function isPaint(paint: Paint): paint is VectorAdapterLayerPaint;
declare function isBasePaint(paint: Paint): paint is GeometryPaint;
declare function isPaintCallback(paint: Paint): paint is GetPaintCallback;
declare function isIcon(paint: IconPaint): paint is IconPaint;

export { type Base3DPaint, type BasePaint, type CirclePaint, type Ellipsoid3DPaint, type GeometryPaint, type GetCustomPaintOptions, type GetPaint3DCallback, type GetPaintCallback, type GetPaintFunction, type IconOptions, type IconPaint, type Paint, type Paint3D, type Paint3DType, type PaintType, type PathPaint, type PinPaint, type PreparePaintOptions, type PropertiesPaint, type PropertiesPaint3D, type PropertyPaint, type PropertyPaint3D, type Sphere3DPaint, type VectorAdapterLayerPaint, type VectorAdapterLayerPaint3D, createExpressionCallback, isBasePaint, isIcon, isPaint, isPaintCallback, isPropertiesPaint, preparePaint };
