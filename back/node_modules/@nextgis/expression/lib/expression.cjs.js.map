{"version":3,"file":"expression.cjs.js","sources":["../src/utils/evaluateArgs.ts","../src/expressions/decisionExpressions.ts","../src/constants/colors.ts","../src/utils/color.ts","../src/expressions/interpolationExpressions/interpolate.ts","../src/expressions/interpolationExpressions/step.ts","../src/expressions/interpolationExpressions/index.ts","../src/expressions/lookupExpressions.ts","../src/expressions/mathExpressions.ts","../src/expressions/stringExpressions.ts","../src/utils/tryConvert.ts","../src/utils/fallback.ts","../src/expressions/typeExpressions.ts","../src/expression.ts"],"sourcesContent":["import type {\n  ExpressionCbFunc,\n  ExpressionFunc,\n  MapToCallback,\n  SimpleType,\n} from '../interfaces';\n\nexport default function evaluateArgs<\n  T extends SimpleType[] = SimpleType[],\n  R = T[0],\n>(cb: ExpressionFunc<T, R>): ExpressionCbFunc<T, R> {\n  return (args: MapToCallback<T>, data) => {\n    const unwrap = args.map((a) => a()) as T;\n    return cb(unwrap, data);\n  };\n}\n","import e from '../utils/evaluateArgs';\n\nimport type { DecisionExpressionName, ExpressionCbFunc } from '../interfaces';\n\nfunction not([expr]: [boolean]): boolean {\n  return !expr;\n}\n\nfunction notEqual([a, b]: [value1: any, value2: any]): boolean {\n  return a !== b;\n}\n\nfunction lessThan([left, right]: [value1: any, value2: any]): boolean {\n  return left < right;\n}\n\nfunction lessThanOrEqual([left, right]: [value1: any, value2: any]): boolean {\n  return left <= right;\n}\n\nfunction equal([left, right]: [value1: any, value2: any]): boolean {\n  return left === right;\n}\n\nfunction greaterThan([left, right]: [value1: any, value2: any]): boolean {\n  return left > right;\n}\n\nfunction greaterThanOrEqual([left, right]: [\n  value1: any,\n  value2: any,\n]): boolean {\n  return left >= right;\n}\n\nconst coalesce: ExpressionCbFunc<any[], any> = (args) => {\n  for (let i = 0; i < args.length; i++) {\n    const arg = args[i]();\n    if (arg !== null && arg !== undefined) {\n      return arg;\n    }\n  }\n  return null;\n};\n\nconst all: ExpressionCbFunc<any[], boolean> = (args) => {\n  for (let i = 0; i < args.length; i++) {\n    const arg = args[i]();\n    if (!arg) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst any: ExpressionCbFunc<any[], boolean> = (args) => {\n  for (let i = 0; i < args.length; i++) {\n    const arg = args[i]();\n    if (arg) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst match: ExpressionCbFunc<any[]> = (args) => {\n  const [lookupFn, ...cases] = args;\n  const lookup = lookupFn();\n  // remove last odd item from cases array\n  const defValue = cases.splice(-1, cases.length % 2)[0];\n  for (let fry = 0; fry < cases.length - 1; fry += 2) {\n    const key = cases[fry]();\n    if (key === lookup) {\n      return cases[fry + 1]();\n    }\n  }\n  return defValue();\n};\n\ntype OutputType = any;\nconst caseFunc: ExpressionCbFunc<\n  [boolean, OutputType, ...Array<boolean | OutputType>],\n  OutputType\n> = (args) => {\n  if (args.length < 2) {\n    throw new Error(\n      'The \"case\" function requires at least a condition and a corresponding output.',\n    );\n  }\n\n  if (args.length % 2 === 0) {\n    throw new Error(\n      'Missing a fallback value or unmatched condition-output pair.',\n    );\n  }\n  for (let i = 0; i < args.length - 1; i += 2) {\n    const condition = args[i]() as boolean;\n    const value = args[i + 1]() as OutputType;\n    if (condition) {\n      return value;\n    }\n  }\n  const fallback = args[args.length - 1];\n  return fallback();\n};\n\nexport const decisionExpressions: Record<\n  DecisionExpressionName,\n  ExpressionCbFunc\n> = {\n  '!': e(not),\n  '!=': e(notEqual),\n  '<': e(lessThan),\n  '<=': e(lessThanOrEqual),\n  '==': e(equal),\n  '>': e(greaterThan),\n  '>=': e(greaterThanOrEqual),\n  coalesce,\n  all,\n  any,\n  case: caseFunc,\n  match,\n};\n","export const COLORS = {\n  aliceblue: '#f0f8ff',\n  antiquewhite: '#faebd7',\n  aqua: '#00ffff',\n  aquamarine: '#7fffd4',\n  azure: '#f0ffff',\n  beige: '#f5f5dc',\n  bisque: '#ffe4c4',\n  black: '#000000',\n  blanchedalmond: '#ffebcd',\n  blue: '#0000ff',\n  blueviolet: '#8a2be2',\n  brown: '#a52a2a',\n  burlywood: '#deb887',\n  cadetblue: '#5f9ea0',\n  chartreuse: '#7fff00',\n  chocolate: '#d2691e',\n  coral: '#ff7f50',\n  cornflowerblue: '#6495ed',\n  cornsilk: '#fff8dc',\n  crimson: '#dc143c',\n  cyan: '#00ffff',\n  darkblue: '#00008b',\n  darkcyan: '#008b8b',\n  darkgoldenrod: '#b8860b',\n  darkgray: '#a9a9a9',\n  darkgreen: '#006400',\n  darkkhaki: '#bdb76b',\n  darkmagenta: '#8b008b',\n  darkolivegreen: '#556b2f',\n  darkorange: '#ff8c00',\n  darkorchid: '#9932cc',\n  darkred: '#8b0000',\n  darksalmon: '#e9967a',\n  darkseagreen: '#8fbc8f',\n  darkslateblue: '#483d8b',\n  darkslategray: '#2f4f4f',\n  darkturquoise: '#00ced1',\n  darkviolet: '#9400d3',\n  deeppink: '#ff1493',\n  deepskyblue: '#00bfff',\n  dimgray: '#696969',\n  dodgerblue: '#1e90ff',\n  firebrick: '#b22222',\n  floralwhite: '#fffaf0',\n  forestgreen: '#228b22',\n  fuchsia: '#ff00ff',\n  gainsboro: '#dcdcdc',\n  ghostwhite: '#f8f8ff',\n  gold: '#ffd700',\n  goldenrod: '#daa520',\n  gray: '#808080',\n  green: '#008000',\n  greenyellow: '#adff2f',\n  honeydew: '#f0fff0',\n  hotpink: '#ff69b4',\n  'indianred ': '#cd5c5c',\n  indigo: '#4b0082',\n  ivory: '#fffff0',\n  khaki: '#f0e68c',\n  lavender: '#e6e6fa',\n  lavenderblush: '#fff0f5',\n  lawngreen: '#7cfc00',\n  lemonchiffon: '#fffacd',\n  lightblue: '#add8e6',\n  lightcoral: '#f08080',\n  lightcyan: '#e0ffff',\n  lightgoldenrodyellow: '#fafad2',\n  lightgrey: '#d3d3d3',\n  lightgreen: '#90ee90',\n  lightpink: '#ffb6c1',\n  lightsalmon: '#ffa07a',\n  lightseagreen: '#20b2aa',\n  lightskyblue: '#87cefa',\n  lightslategray: '#778899',\n  lightsteelblue: '#b0c4de',\n  lightyellow: '#ffffe0',\n  lime: '#00ff00',\n  limegreen: '#32cd32',\n  linen: '#faf0e6',\n  magenta: '#ff00ff',\n  maroon: '#800000',\n  mediumaquamarine: '#66cdaa',\n  mediumblue: '#0000cd',\n  mediumorchid: '#ba55d3',\n  mediumpurple: '#9370d8',\n  mediumseagreen: '#3cb371',\n  mediumslateblue: '#7b68ee',\n  mediumspringgreen: '#00fa9a',\n  mediumturquoise: '#48d1cc',\n  mediumvioletred: '#c71585',\n  midnightblue: '#191970',\n  mintcream: '#f5fffa',\n  mistyrose: '#ffe4e1',\n  moccasin: '#ffe4b5',\n  navajowhite: '#ffdead',\n  navy: '#000080',\n  oldlace: '#fdf5e6',\n  olive: '#808000',\n  olivedrab: '#6b8e23',\n  orange: '#ffa500',\n  orangered: '#ff4500',\n  orchid: '#da70d6',\n  palegoldenrod: '#eee8aa',\n  palegreen: '#98fb98',\n  paleturquoise: '#afeeee',\n  palevioletred: '#d87093',\n  papayawhip: '#ffefd5',\n  peachpuff: '#ffdab9',\n  peru: '#cd853f',\n  pink: '#ffc0cb',\n  plum: '#dda0dd',\n  powderblue: '#b0e0e6',\n  purple: '#800080',\n  rebeccapurple: '#663399',\n  red: '#ff0000',\n  rosybrown: '#bc8f8f',\n  royalblue: '#4169e1',\n  saddlebrown: '#8b4513',\n  salmon: '#fa8072',\n  sandybrown: '#f4a460',\n  seagreen: '#2e8b57',\n  seashell: '#fff5ee',\n  sienna: '#a0522d',\n  silver: '#c0c0c0',\n  skyblue: '#87ceeb',\n  slateblue: '#6a5acd',\n  slategray: '#708090',\n  snow: '#fffafa',\n  springgreen: '#00ff7f',\n  steelblue: '#4682b4',\n  tan: '#d2b48c',\n  teal: '#008080',\n  thistle: '#d8bfd8',\n  tomato: '#ff6347',\n  turquoise: '#40e0d0',\n  violet: '#ee82ee',\n  wheat: '#f5deb3',\n  white: '#ffffff',\n  whitesmoke: '#f5f5f5',\n  yellow: '#ffff00',\n  yellowgreen: '#9acd32',\n};\n","import { COLORS } from '../constants/colors';\n\nexport type ColorArray = [r: number, g: number, b: number, a?: number];\n\nexport type ColorObject = {\n  r: number;\n  g: number;\n  b: number;\n  a?: number;\n};\nexport type Color = string | ColorObject;\n\nfunction isHex(hex: any): hex is string {\n  return typeof hex === 'string' && /^#([A-Fa-f0-9]{3}){1,2}$/.test(hex);\n}\n\nfunction isRgb(hex: any): hex is string {\n  const r =\n    // eslint-disable-next-line max-len\n    /^rgb(a?)\\(\\s*([0-9]+)\\s*,\\s*([0-9]+)\\s*,\\s*([0-9]+)(?:\\s*,\\s*([01](?:\\.\\d+)?))?\\s*\\)$/;\n  return typeof hex === 'string' && r.test(hex);\n}\n\nfunction isColorObj(obj: any): obj is ColorObject {\n  if (typeof obj === 'object' && obj !== null) {\n    const hasRgb = 'r' in obj && 'g' in obj && 'b' in obj;\n    const hasValidAlpha =\n      !('a' in obj) || (typeof obj.a === 'number' && obj.a >= 0 && obj.a <= 1);\n    return hasRgb && hasValidAlpha;\n  }\n  return false;\n}\n\nfunction isColorName(name: any): name is keyof typeof COLORS {\n  if (typeof name === 'string' && name in COLORS) {\n    return true;\n  }\n  return false;\n}\n\nexport function isColor(value: any): value is Color {\n  return [isColorName, isHex, isRgb, isColorObj].some((c) => c(value));\n}\n\nexport function toColor(value: Color): ColorArray {\n  if (isHex(value)) {\n    return hexToColor(value);\n  } else if (isColorName(value)) {\n    return colorNameToColor(value);\n  } else if (isRgb(value)) {\n    return rgbToColor(value);\n  } else if (isColorObj(value)) {\n    return colorObjectToColor(value);\n  }\n  throw new Error(`The '${value}' cannot be converted to color`);\n}\n\nfunction colorNameToColor(name: keyof typeof COLORS) {\n  return hexToColor(COLORS[name]);\n}\n\nfunction hexToColor(hex: string): ColorArray {\n  const shortRGB = /^#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])$/;\n  const shortRGBA = /^#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])$/;\n  const longRGB = /^#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/;\n  const longRGBA =\n    /^#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/;\n\n  let result;\n\n  if ((result = shortRGB.exec(hex))) {\n    return [\n      parseInt(result[1] + result[1], 16),\n      parseInt(result[2] + result[2], 16),\n      parseInt(result[3] + result[3], 16),\n    ];\n  } else if ((result = shortRGBA.exec(hex))) {\n    return [\n      parseInt(result[1] + result[1], 16),\n      parseInt(result[2] + result[2], 16),\n      parseInt(result[3] + result[3], 16),\n      parseInt(result[4] + result[4], 16) / 255,\n    ];\n  } else if ((result = longRGB.exec(hex))) {\n    return [\n      parseInt(result[1], 16),\n      parseInt(result[2], 16),\n      parseInt(result[3], 16),\n    ];\n  } else if ((result = longRGBA.exec(hex))) {\n    return [\n      parseInt(result[1], 16),\n      parseInt(result[2], 16),\n      parseInt(result[3], 16),\n      parseInt(result[4], 16) / 255,\n    ];\n  }\n  throw new Error(`The '${hex}' Is not valid hex`);\n}\n\nfunction rgbToColor(rgb: string): ColorArray {\n  const rgbPattern = /^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/;\n  const rgbaPattern = /^rgba\\((\\d+),\\s*(\\d+),\\s*(\\d+),\\s*([\\d.]+)\\)$/;\n\n  let matches;\n\n  if ((matches = rgb.match(rgbPattern))) {\n    return [\n      parseInt(matches[1], 10),\n      parseInt(matches[2], 10),\n      parseInt(matches[3], 10),\n    ];\n  } else if ((matches = rgb.match(rgbaPattern))) {\n    return [\n      parseInt(matches[1], 10),\n      parseInt(matches[2], 10),\n      parseInt(matches[3], 10),\n      parseFloat(matches[4]),\n    ];\n  }\n\n  throw new Error(`The '${rgb}' Is not valid rgb`);\n}\n\nexport function colorObjectToColor({ r, g, b, a }: ColorObject): ColorArray {\n  return [r, g, b, ...(a !== undefined ? [a] : [])] as ColorArray;\n}\n\nexport function colorToRGB(array: ColorArray): string {\n  return `rgb(${array.join(',')})`;\n}\n","import { type ColorArray, colorToRGB, toColor } from '../../utils/color';\n\nimport type { ExpressionCbFunc } from '../../interfaces';\n\ntype LinearInterpolation = ['linear'];\ntype ExponentialInterpolation = [name: 'exponential', base: number];\ntype CubicBezierInterpolation = [\n  name: 'cubic-bezier',\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n];\ntype Interpolation =\n  | LinearInterpolation\n  | ExponentialInterpolation\n  | CubicBezierInterpolation;\n\ntype OutputType = any;\n\ntype InterpolateArgs = [\n  interpolation: Interpolation,\n  input: number,\n  ...stops: (number | OutputType)[],\n];\n\nfunction linearInterpolation(\n  input: number,\n  input1: number,\n  output1: OutputType,\n  input2: number,\n  output2: OutputType,\n): OutputType {\n  if (typeof output1 === 'number' && typeof output2 === 'number') {\n    return (\n      output1 + ((input - input1) / (input2 - input1)) * (output2 - output1)\n    );\n  }\n\n  try {\n    const outputColor1 = toColor(output1);\n    const outputColor2 = toColor(output2);\n    return colorToRGB(\n      outputColor1.map((val, index) => {\n        return Math.ceil(\n          linearInterpolation(input, input1, val, input2, outputColor2[index]),\n        );\n      }) as ColorArray,\n    );\n  } catch (er) {\n    console.log(er);\n  }\n\n  throw new Error('Unsupported output type for linear interpolation.');\n}\n\nexport const interpolate: ExpressionCbFunc<InterpolateArgs, OutputType> = ([\n  interpolationFn,\n  inputFn,\n  ...stops\n]) => {\n  if (stops.length < 2) {\n    throw new Error('At least two stops are required');\n  }\n  if (stops.length < 2 || stops.length % 2 !== 0) {\n    throw new Error('Invalid stops provided.');\n  }\n  const input = inputFn();\n\n  if (typeof input !== 'number') {\n    throw new Error('Input must be a number.');\n  }\n  const interpolation = interpolationFn();\n  for (let i = 0; i < stops.length - 2; i += 2) {\n    const stopInput1 = stops[i]() as number;\n    const stopOutput1 = stops[i + 1]() as OutputType;\n    const stopInput2 = stops[i + 2]() as number;\n    const stopOutput2 = stops[i + 3]() as OutputType;\n\n    if (input >= stopInput1 && input <= stopInput2) {\n      if (interpolation[0] === 'linear') {\n        return linearInterpolation(\n          input,\n          stopInput1,\n          stopOutput1,\n          stopInput2,\n          stopOutput2,\n        );\n      }\n      // else if (interpolation[0] === 'exponential') {\n      //   const base = interpolation[1];\n      //   return exponentialInterpolation(\n      //     input,\n      //     base,\n      //     stopInput1,\n      //     stopOutput1,\n      //     stopInput2,\n      //     stopOutput2,\n      //   );\n      // }\n    }\n  }\n\n  throw new Error('Invalid interpolation type.');\n};\n","import type { ExpressionCbFunc } from '../../interfaces';\n\ntype OutputType = number | string | boolean | null;\n\nexport const step: ExpressionCbFunc<(number | OutputType)[], OutputType> = (\n  args,\n) => {\n  const [inputFn, defaultValue, ...stops] = args;\n  const input = inputFn();\n\n  if (typeof input !== 'number') {\n    return defaultValue() as OutputType;\n  }\n\n  for (let i = 0; i < stops.length - 2; i += 2) {\n    const stopInput = stops[i]() as number;\n    const stopOutput = stops[i + 1]() as OutputType;\n    const nextStopInput = stops[i + 2]() as number;\n\n    if (input >= stopInput && input < nextStopInput) {\n      return stopOutput;\n    }\n  }\n\n  if (input >= (stops[stops.length - 2]() as number)) {\n    return stops[stops.length - 1]();\n  }\n\n  return defaultValue();\n};\n","import { interpolate } from './interpolate';\nimport { step } from './step';\n\nimport type {\n  ExpressionFunc,\n  InterpolationExpressionName,\n} from '../../interfaces';\n\nexport const interpolationExpressions: Record<\n  InterpolationExpressionName,\n  ExpressionFunc\n> = {\n  step,\n  interpolate,\n};\n","import e from '../utils/evaluateArgs';\n\nimport type {\n  Data,\n  ExpressionCbFunc,\n  LookupExpressionName,\n  SimpleType,\n} from '../interfaces';\n\ntype GetArg = [key: string] | [key: string, obj: Record<string, any>];\n\nfunction get([key, objExp]: GetArg, data: Data): SimpleType | null {\n  const target = objExp || data;\n  if (target && typeof target === 'object' && key in target) {\n    return target[key];\n  }\n  return null;\n}\n\nfunction has([key, objExp]: GetArg, data: Data): boolean {\n  const target = objExp || data;\n  return !!(target && typeof target === 'object' && key in target);\n}\n\nfunction at([index, array]: [index: number, array: any[]]): SimpleType {\n  return array[index];\n}\n\ntype InArgs = [keyword: string | boolean | number, input: string | any[]];\nfunction inFunc([keyword, input]: InArgs): boolean {\n  if (typeof input === 'string') {\n    return input.includes(String(keyword));\n  } else if (Array.isArray(input)) {\n    return input.includes(keyword);\n  }\n  throw new Error(\n    `Invalid input type for 'in'. Expected string or array, got ${typeof input}.`,\n  );\n}\n\nconst length = ([item]: [string | any[]]) => {\n  if (typeof item === 'string' || Array.isArray(item)) {\n    return item.length;\n  }\n  return undefined;\n};\n\ntype IndexOfArgs =\n  | [keyword: string | boolean | number, input: string | any[]]\n  | [keyword: string | boolean | number, input: string | any[], index: number];\nfunction indexOf([keyword, input, startIndex]: IndexOfArgs): number {\n  if (typeof input === 'string') {\n    return input.indexOf(String(keyword), startIndex);\n  } else if (Array.isArray(input)) {\n    return input.indexOf(keyword, startIndex);\n  }\n\n  throw new Error(\n    `Invalid input type for 'index-of'. Expected string or array, got ${typeof input}.`,\n  );\n}\n\ntype SliceArgs =\n  | [input: string | any[], startIndex: number]\n  | [input: string | any[], startIndex: number, endIndex: number];\n\nfunction slice(args: SliceArgs): string | any[] {\n  const [input, startIndex, endIndex] = args;\n\n  if (typeof input === 'string') {\n    return input.slice(startIndex, endIndex);\n  } else if (Array.isArray(input)) {\n    return input.slice(startIndex, endIndex);\n  }\n\n  throw new Error(\n    `Invalid input type for 'slice'. Expected string or array, got ${typeof input}.`,\n  );\n}\n\nexport const lookupExpressions: Record<LookupExpressionName, ExpressionCbFunc> =\n  {\n    get: e(get),\n    length: e(length),\n    at: e(at),\n    has: e(has),\n    in: e(inFunc),\n    'index-of': e(indexOf),\n    slice: e(slice),\n  };\n","import e from '../utils/evaluateArgs';\n\nimport type { ExpressionCbFunc, MathExpressionName } from '../interfaces';\n\nexport const mathExpressions: Record<\n  MathExpressionName,\n  ExpressionCbFunc<number[], number>\n> = {\n  '+': e((args) => args.reduce((a, b) => a + b, 0)),\n  '-': e((args) => args.reduce((a, b) => a - b)),\n  '*': e((args) => args.reduce((a, b) => a * b, 1)),\n  '/': e((args) => args.reduce((a, b) => a / b)),\n  '%': e((args) => args[0] % args[1]),\n  '^': e((args) => Math.pow(args[0], args[1])),\n  abs: e((args) => Math.abs(args[0])),\n  acos: e((args) => Math.acos(args[0])),\n  asin: e((args) => Math.asin(args[0])),\n  atan: e((args) => Math.atan(args[0])),\n  ceil: e((args) => Math.ceil(args[0])),\n  cos: e((args) => Math.cos(args[0])),\n  e: () => Math.E,\n  floor: e((args) => Math.floor(args[0])),\n  ln: e((args) => Math.log(args[0])),\n  ln2: () => Math.LN2,\n  log10: e((args) => Math.log10(args[0])),\n  log2: e((args) => Math.log2(args[0])),\n  max: e((args) => Math.max(...args)),\n  min: e((args) => Math.min(...args)),\n  pi: () => Math.PI,\n  round: e((args) => Math.round(args[0])),\n  sin: e((args) => Math.sin(args[0])),\n  sqrt: e((args) => Math.sqrt(args[0])),\n  tan: e((args) => Math.tan(args[0])),\n};\n","import e from '../utils/evaluateArgs';\n\nimport type { ExpressionCbFunc, StringExpressionName } from '../interfaces';\n\nexport const stringExpressions: Record<\n  StringExpressionName,\n  ExpressionCbFunc<string[], string>\n> = {\n  concat: e((args) => args.reduce((a, b) => String(a) + String(b), '')),\n  downcase: e((args) => String(args[0]).toLowerCase()),\n  upcase: e((args) => String(args[0]).toUpperCase()),\n};\n","export const tryConvert = (\n  converter: (arg: any, data: any) => any,\n  arg: any,\n  data: any,\n): any => {\n  try {\n    const result = converter(arg, data);\n    if (result !== undefined) {\n      return result;\n    }\n  } catch {\n    // ignore errors\n  }\n  return undefined;\n};\n","import { tryConvert } from './tryConvert';\n\nimport type { ExpressionFunc, SimpleType } from '../interfaces';\n\nexport default function fallback<\n  T extends SimpleType[] = SimpleType[],\n  R = T[0],\n>(cb: ExpressionFunc<T, R | undefined>): ExpressionFunc<T[], R> {\n  return (args: T[], data) => {\n    for (const arg of args) {\n      const result = tryConvert(cb, arg, data);\n      if (result !== undefined) {\n        return result;\n      }\n    }\n    throw new Error(`Received a mismatched type`);\n  };\n}\n","import e from '../utils/evaluateArgs';\nimport f from '../utils/fallback';\n\nimport type { ExpressionCbFunc, TypeExpressionName } from '../interfaces';\n\ntype ArrayType = 'string' | 'number' | 'boolean';\n\ntype ArrayArgs =\n  | [value: any[]]\n  | [type: ArrayType, value: any[]]\n  | [type: ArrayType, n: number, value: any[]];\n\nconst array = (args: ArrayArgs): any[] => {\n  const [firstArg, secondArg, thirdArg] = args;\n  let requiredType: ArrayType | undefined = undefined;\n  let requiredLength: number | undefined = undefined;\n  let value: any[] | undefined;\n\n  if (\n    typeof firstArg === 'string' &&\n    ['string', 'number', 'boolean'].includes(firstArg)\n  ) {\n    requiredType = firstArg;\n\n    if (typeof secondArg === 'number') {\n      requiredLength = secondArg;\n      value = thirdArg;\n    } else {\n      value = secondArg;\n    }\n  } else if (Array.isArray(firstArg)) {\n    value = firstArg;\n  }\n  if (!Array.isArray(value)) {\n    throw new Error('Expected an array');\n  }\n  if (requiredType && !value.every((item) => typeof item === requiredType)) {\n    throw new Error(\n      `Expected all items in array to be of type ${requiredType}`,\n    );\n  }\n\n  if (requiredLength && value.length !== requiredLength) {\n    throw new Error(`Expected array of length ${requiredLength}`);\n  }\n  return value;\n};\n\nfunction typeOfValue(value: any): string {\n  if (value === null) return 'null';\n  switch (typeof value) {\n    case 'string':\n      return 'string';\n    case 'number':\n      return 'number';\n    case 'boolean':\n      return 'boolean';\n    case 'object':\n      if (Array.isArray(value)) {\n        let arrayType = 'value';\n        if (value.every((item) => typeof item === 'number')) {\n          arrayType = 'number';\n        } else if (value.every((item) => typeof item === 'string')) {\n          arrayType = 'string';\n        } else if (value.every((item) => typeof item === 'boolean')) {\n          arrayType = 'boolean';\n        }\n        return `array<${arrayType}, ${value.length}>`;\n      } else {\n        return 'object';\n      }\n    default:\n      return 'undefined';\n  }\n}\n\nexport const typeExpressions: Record<TypeExpressionName, ExpressionCbFunc> = {\n  array: e(array),\n  boolean: e(\n    f<boolean[]>((arg) => (typeof arg === 'boolean' ? arg : undefined)),\n  ),\n  literal: e(([arg]) => arg),\n  number: e(f<number[]>((arg) => (typeof arg === 'number' ? arg : undefined))),\n  object: e(\n    f<Record<string, any>[]>((arg) =>\n      arg !== null && typeof arg === 'object' && !Array.isArray(arg)\n        ? arg\n        : undefined,\n    ),\n  ),\n\n  string: e(f((arg) => (typeof arg === 'string' ? arg : undefined))),\n  'to-boolean': e(f(Boolean)),\n  'to-number': e(f(Number)),\n  'to-string': e(f(String)),\n  typeof: e(([arg]) => typeOfValue(arg)),\n};\n","import { decisionExpressions } from './expressions/decisionExpressions';\nimport { interpolationExpressions } from './expressions/interpolationExpressions';\nimport { lookupExpressions } from './expressions/lookupExpressions';\nimport { mathExpressions } from './expressions/mathExpressions';\nimport { stringExpressions } from './expressions/stringExpressions';\nimport { typeExpressions } from './expressions/typeExpressions';\n\nimport type {\n  Data,\n  Expression,\n  ExpressionFunc,\n  ExpressionName,\n  SimpleType,\n} from './interfaces';\n\nexport function isExpression(value: any): value is Expression {\n  if (Array.isArray(value)) {\n    const [lookup, ...cases] = value;\n    const l = lookup as ExpressionName;\n    return (\n      typeof l === 'string' &&\n      l !== 'literal' &&\n      l in expressions &&\n      cases.length > 0\n    );\n  }\n  return false;\n}\n\nconst expressions: { [key in ExpressionName]: ExpressionFunc } = {\n  ...mathExpressions,\n  ...typeExpressions,\n  ...stringExpressions,\n  ...lookupExpressions,\n  ...decisionExpressions,\n  ...interpolationExpressions,\n};\n\nexport function evaluate<T extends SimpleType[] = SimpleType[], R = T[0]>(\n  expression: Expression,\n  data: Data = {},\n): R {\n  const [name, ...args] = expression;\n  const expressionFun = expressions[name];\n  if (expressionFun) {\n    return expressionFun(\n      args.map((arg) => () => (isExpression(arg) ? evaluate(arg, data) : arg)),\n      data,\n    );\n  }\n  throw new Error(`Expression \"${name}\" is not supported.`);\n}\n"],"names":["e","f"],"mappings":"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"}